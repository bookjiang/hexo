<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>搭建hexo博客：阿里云+github+域名+自动部署webhook</title>
      <link href="/2020/07/14/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%EF%BC%9A%E9%98%BF%E9%87%8C%E4%BA%91+github+%E5%9F%9F%E5%90%8D+%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2webhook/"/>
      <url>/2020/07/14/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%EF%BC%9A%E9%98%BF%E9%87%8C%E4%BA%91+github+%E5%9F%9F%E5%90%8D+%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2webhook/</url>
      
        <content type="html"><![CDATA[<h1 id="一、本地环境配置"><a href="#一、本地环境配置" class="headerlink" title="一、本地环境配置"></a>一、本地环境配置</h1><h2 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a></h2><p>最好去官网下载最新安装包，不然可能会导致因为node版本问题无法正常使用hexo。（我当时尝试单独升级node，发现npm与node版本又不匹配，所以直接下载安装了）</p><h3 id="1-1下载Win10版nvm"><a href="#1-1下载Win10版nvm" class="headerlink" title="1.1下载Win10版nvm"></a>1.1<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">下载Win10版nvm</a></h3><p>下载一直next安装即可，注意管理员身份和路径中不要有中文名</p><h3 id="1-2配置npm和node-js的下载源"><a href="#1-2配置npm和node-js的下载源" class="headerlink" title="1.2配置npm和node.js的下载源"></a>1.2配置npm和node.js的下载源</h3><p>编辑nvm目录下的settings.txt文件,在最后加入如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F;</span><br><span class="line">npm_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;</span><br></pre></td></tr></table></figure><h3 id="1-3下载npm和node-js"><a href="#1-3下载npm和node-js" class="headerlink" title="1.3下载npm和node.js"></a>1.3下载npm和node.js</h3><p><code>nvm v</code>检查nvm是否安装成功<br>安装<code>node nvm install 8.0.0</code><br>使用<code>node nvm use 8.0.0</code><br>检查node和npm: <code>node nvm use 8.0.0</code> <code>npm -v</code><br>安装多个node版本并切换: <code>nvm list</code>安装最新的node.js及配套npm<code>nvm install latest</code><br>如果想要切换:<code>nvm use 想要使用的node版本</code></p><h2 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2.安装git"></a>2.安装git</h2><p><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">下载git安装</a></p><p>利用<code>git -version</code> 确认是够安装成功</p><p>配置github用户名和邮箱地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name “xxxxxx” # 自行替换</span><br><span class="line">git config --global user.email “xxxxxx@xx.com” # 自行替换</span><br></pre></td></tr></table></figure><p>执行生成密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot; # 你的 GitHub邮箱地址</span><br></pre></td></tr></table></figure><p>一直enter即可</p><p>~/.ssh文件夹下就会生成id_rsa（私有秘钥）和id_rsa.pub（公有密钥），找到公钥打开复制</p><p>进入github-&gt;settting-&gt;新增ssh key</p><p>完成后检查测试配置是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">The authenticity of host &#39;github.com (13.229.188.59)&#39; can&#39;t be established.</span><br><span class="line">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no&#x2F;[fingerprint])? yes</span><br><span class="line">Warning: Permanently added &#39;github.com,13.229.188.59&#39; (RSA) to the list of known hosts.</span><br></pre></td></tr></table></figure><p>看到这个即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi bookjiang! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><h2 id="3-新建一个github仓库用于存放博客文件"><a href="#3-新建一个github仓库用于存放博客文件" class="headerlink" title="3.新建一个github仓库用于存放博客文件"></a>3.新建一个github仓库用于存放博客文件</h2><h2 id="4-Hexo安装"><a href="#4-Hexo安装" class="headerlink" title="4.Hexo安装"></a>4.Hexo安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>验证安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>在这里出现问题</p><ol><li>安装hexo出问题，可以更换源<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">npm config list</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>我又在用hexo时出现SyntaxError: Unexpected token …<br>原因应该是版本问题，重新去<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官网下载</a>node.js安装即可</li></ol><h3 id="使用Hexo"><a href="#使用Hexo" class="headerlink" title="使用Hexo"></a>使用Hexo</h3><p>本地新建一个文件夹Blog，保存hexo代码库，初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>安装代码仓库所需要的依赖包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>执行命令本地预览页面效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate #也可简写为hexo g</span><br><span class="line">hexo server #简写为hexo s</span><br></pre></td></tr></table></figure><p>输入<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 打开页面,可以看到一个hexo的模板</p><p>Ctrl+C中断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &quot;first blog&quot; # 注意标题中有空格需要用双引号包起来</span><br></pre></td></tr></table></figure><p>source/_post文件夹下会有个first-blog.md文件<br>再次启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="配置hexo的发布"><a href="#配置hexo的发布" class="headerlink" title="配置hexo的发布"></a>配置hexo的发布</h3><p>安装hexo的git部署插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改项目下配置文件_config.yml，文件最下方修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: git@github.com:your_name&#x2F;blog-web.git # 替换为刚才新建git代码库的ssh链接</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p>配置好后更新至github</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g # 清楚本来的打包代码并生成出新的</span><br><span class="line"></span><br><span class="line">hexo d # hexo deploy的简写命令&#96;</span><br></pre></td></tr></table></figure><h1 id="二、服务器配置"><a href="#二、服务器配置" class="headerlink" title="二、服务器配置"></a>二、服务器配置</h1><pre><code>我用的BatchShell连接远程服务器（容易断连，后期还是用putty软件）注意打开阿里云相关安全端口（在浏览器中进入阿里云控制台主页）安全组放开三个端口：80/80，443/443,7777/7777服务器防火墙开放80、443、7777端口域名映射到服务器公网ip（省略了步骤）</code></pre><h2 id="1-安装Node-js-1"><a href="#1-安装Node-js-1" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h2><h3 id="1-1安装curl"><a href="#1-1安装curl" class="headerlink" title="1.1安装curl"></a>1.1安装curl</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install curl</span><br><span class="line">curl --version</span><br></pre></td></tr></table></figure><h3 id="1-2安装nvm"><a href="#1-2安装nvm" class="headerlink" title="1.2安装nvm"></a>1.2安装nvm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;nvm-sh&#x2F;nvm&#x2F;v0.35.3&#x2F;install.sh | bash</span><br></pre></td></tr></table></figure><p>如果失败了可能github域名污染，修改hosts文件即可<code>vim /etc/hosts</code><br>添加<code>199.232.28.133  raw.githubusercontent.com</code>保存后重新执行<code>source ~/.bash_profile</code>即可。</p><p>下载完后执行<code>nvm</code>可能会提示”<code>nvm： command not found</code>,可以手动添加环境变量我的文件在/root下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi .bash_profile</span><br></pre></td></tr></table></figure><p>添加这段内容<code>export NVM_DIR=&quot;$HOME/.nvm&quot;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;</code><br>再次执行<code>source ~/.bash_profile</code></p><h3 id="1-3通过nvm安装node-js"><a href="#1-3通过nvm安装node-js" class="headerlink" title="1.3通过nvm安装node.js"></a>1.3通过nvm安装node.js</h3><p>查看node版本<code>nvm list -remote</code><br>选择安装任意版本 <code>nvm install v8.11.4</code><br>查看已安装的node版本<code>node list</code><br>切换到想要使用的版本<code>nvm use v8.11.4</code><br>将此版本设置为默认版本<code>nvm alias default v8.11.4</code><br>验证是否安装成功<code>node --version npm -v</code></p><h2 id="2安装git并配置"><a href="#2安装git并配置" class="headerlink" title="2安装git并配置"></a>2安装git并配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install git</span><br></pre></td></tr></table></figure><p>用<code>git -version</code>确认<br>第一次配置需要你的github用户名和邮箱地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name “xxxxxx” # 自行替换</span><br><span class="line">git config --global user.email “xxxxxx@xx.com” # 自行替换</span><br></pre></td></tr></table></figure><p>生成密钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot; # 你的 GitHub邮箱地址</span><br></pre></td></tr></table></figure><p>一直enter即可，最后看到密钥的image即可<br>此时~/.ssh文件夹下就会生成id_rsa（私有秘钥）和id_rsa.pub（公有密钥），将公钥复制带粘贴板<br>进入github-&gt;setting-&gt;SSH and GPG keys-&gt;new SSH key粘贴进入，Title随意取<br>完成后测试配置是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">Hi xxxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>在服务器端新建一个文件目录存放博客代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;root</span><br><span class="line">mkdir Blog </span><br><span class="line">cd Blog</span><br><span class="line">mkdir hexo</span><br><span class="line">cd hexo</span><br><span class="line">git clone git@github.com:yourname&#x2F;hexo.git # 自行替换为用于存放博客代码的仓库ssh地址</span><br></pre></td></tr></table></figure><h2 id="3-安装及配置Nginx"><a href="#3-安装及配置Nginx" class="headerlink" title="3.安装及配置Nginx"></a>3.安装及配置Nginx</h2><p>新建一个文件夹<code>cd /opt           mkdir  Nginx</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、 下载</span><br><span class="line">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.9.9.tar.gz</span><br><span class="line"># 解压</span><br><span class="line">tar -xvf nginx-1.9.9.tar.gz</span><br><span class="line"># 重命名（太长）</span><br><span class="line">mv  nginx-1.9.9  nginx</span><br><span class="line">2.配置、编译及安装</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>配置环境变量<code>vi /root/.bash_profile</code><br>添加<code>export PATH=&quot;${PATH}:/usr/local/nginx/sbin&quot;</code><br>执行<code>source .bash_profile</code></p><p>修改默认配置文件（我的配置文件在<code>/usr/local/nginx/conf/nginx.conf</code>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi nginx.conf</span><br></pre></td></tr></table></figure><p>修改http中server中的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  www.zhiqiang.online;#自己服务器域名</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line"></span><br><span class="line">       #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">       location &#x2F; &#123;</span><br><span class="line">           root   &#x2F;root&#x2F;Blog&#x2F;hexo;  #服务器中博客目录</span><br><span class="line">           index  index.html index.htm;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       #error_page  404              &#x2F;404.html;</span><br><span class="line"></span><br><span class="line">       # redirect server error pages to the static page &#x2F;50x.html</span><br><span class="line">       #</span><br><span class="line">       error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">       location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">           root   html;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">       #</span><br><span class="line">       #location ~ \.php$ &#123;</span><br><span class="line">       #    proxy_pass   http:&#x2F;&#x2F;127.0.0.1;</span><br><span class="line">       #&#125;</span><br><span class="line"></span><br><span class="line">       # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">       #</span><br><span class="line">       #location ~ \.php$ &#123;</span><br><span class="line">       #    root           html;</span><br><span class="line">       #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">       #    fastcgi_index  index.php;</span><br><span class="line">       #    fastcgi_param  SCRIPT_FILENAME  &#x2F;scripts$fastcgi_script_name;</span><br><span class="line">       #    include        fastcgi_params;</span><br><span class="line">       #&#125;</span><br><span class="line"></span><br><span class="line">       # deny access to .htaccess files, if Apache&#39;s document root</span><br><span class="line">       # concurs with nginx&#39;s one</span><br><span class="line">       #</span><br><span class="line">       #location ~ &#x2F;\.ht &#123;</span><br><span class="line">       #    deny  all;</span><br><span class="line">       #&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>启动nginx，在nginx目录中直接<code>nginx</code>启动<br>可以配置自启（省略）</p><h2 id="4-安装pm2"><a href="#4-安装pm2" class="headerlink" title="4.安装pm2"></a>4.安装pm2</h2><p>pm2是node的守护进程管理器,安装pm2可以在使用webhooks时创建的服务进行维护<br>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pm2 # npm 在装node时已经自动安装</span><br><span class="line">pm2 -v # 查看pm2版本</span><br></pre></td></tr></table></figure><p>pm2 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pm2 start filename# 执行对应路径脚本</span><br><span class="line">pm2 list # 查看看起的进程列表</span><br><span class="line">pm2 restart &lt;name|id&gt; # 重启对应进程</span><br><span class="line">pm2 delete &lt;name|id|‘all’&gt; # 删除对应的进程 all是全部</span><br><span class="line">pm2 logs # 查看进程打印日志</span><br><span class="line">pm2 monit # 监控每个 node 进程的 cpu 和内存使用情况</span><br></pre></td></tr></table></figure><h2 id="5-安装webhooks和配置github的webhooks"><a href="#5-安装webhooks和配置github的webhooks" class="headerlink" title="5.安装webhooks和配置github的webhooks"></a>5.安装webhooks和配置github的webhooks</h2><h3 id="5-1服务端配置"><a href="#5-1服务端配置" class="headerlink" title="5.1服务端配置"></a>5.1服务端配置</h3><p>因为shell脚本中cd命令执行有问题，所以我将webhook脚本直接放在hexo博客所在目录，就不用cd去切换目录了。<br>安装webhooks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g github-webhook-handler</span><br></pre></td></tr></table></figure><p>切换目录<code>cd /root/Blog/hexo</code><br>添加脚本文件webnook.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">var</span> createHandler = <span class="built_in">require</span>(<span class="string">'/root/.nvm/versions/node/v8.11.4/lib/node_modules/github-webhook-handler'</span>) <span class="comment">//更换自己gitwebhook目录</span></span><br><span class="line"><span class="keyword">var</span> handler = createHandler(&#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">secret</span>: <span class="string">'226713'</span> &#125;) </span><br><span class="line"><span class="comment">// 上面的 secret 保持和 GitHub 后台设置的一致</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run_cmd</span>(<span class="params">cmd, args, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn;</span><br><span class="line">  <span class="keyword">var</span> child = spawn(cmd, args);</span><br><span class="line">  <span class="keyword">var</span> resp = <span class="string">""</span>;</span><br><span class="line">  child.stdout.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">buffer</span>) </span>&#123; resp += buffer.toString(); &#125;);</span><br><span class="line">  child.stdout.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; callback (resp) &#125;);</span><br><span class="line">&#125;</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  handler(req, res, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    res.statusCode = <span class="number">404</span></span><br><span class="line">    res.end(<span class="string">'no such location'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).listen(<span class="number">7777</span>)</span><br><span class="line">handler.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, err.message)</span><br><span class="line">&#125;)</span><br><span class="line">handler.on(<span class="string">'push'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Received a push event for %s to %s'</span>,</span><br><span class="line">    event.payload.repository.name,</span><br><span class="line">    event.payload.ref);</span><br><span class="line">    run_cmd(<span class="string">'sh'</span>, [<span class="string">'./deploy.sh'</span>,event.payload.repository.name], <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123; <span class="built_in">console</span>.log(text) &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>添加shell脚本deploy.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 网站的根目录</span></span><br><span class="line">WEB_PATH='/root/Blog/hexo'</span><br><span class="line"> </span><br><span class="line">echo "start deployment"</span><br><span class="line">cd $WEB_PATH</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span> $(<span class="built_in">pwd</span>) </span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span> $(date)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span> $(whoami)</span></span><br><span class="line">echo "fetching from remote..."</span><br><span class="line"><span class="meta">#</span><span class="bash"> 为了避免冲突，强制更新本地文件</span></span><br><span class="line">echo $(sudo git fetch --all) #echo用于输出测试用，加sudo因为不加因为权限问题无法执行git命令</span><br><span class="line">echo $(sudo git reset --hard origin/master)</span><br><span class="line">echo "done"</span><br></pre></td></tr></table></figure><p>用pm2运行脚本webhook.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start webhook.js</span><br></pre></td></tr></table></figure><p>用<code>pm2 list</code>去查看运行状态</p><h3 id="5-2github上设置webhook"><a href="#5-2github上设置webhook" class="headerlink" title="5.2github上设置webhook"></a>5.2github上设置webhook</h3><p>进入博客项目，点击setting<br><img src="https://img-blog.csdnimg.cn/20200711131840816.png" alt="在这里插入图片描述"></p><p>添加webhook<br><img src="https://img-blog.csdnimg.cn/20200711131952386.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MjM5ODE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200711135325500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MjM5ODE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后会显示测试成功，我的截图为：<br><img src="https://img-blog.csdnimg.cn/20200711140016860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MjM5ODE3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在win10上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &quot;test blog&quot;</span><br><span class="line">hexo clean &amp;&amp; hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>如果配置成功，服务器上的博客项目也会自动更新，访问域名即可观察到变化</p><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><p><a href="https://blog.csdn.net/FungLi_notLove/article/details/103450832" target="_blank" rel="noopener">[1]</a>参考链接</p><p><a href="https://stackoverflow.com/questions/3173201/sudo-in-php-exec" target="_blank" rel="noopener">[2]shell中无法执行git命令</a><br><a href="https://segmentfault.com/a/1190000016071010" target="_blank" rel="noopener">[3]webhook.js和deploy.sh脚本参考</a><br><a href="https://segmentfault.com/a/1190000000639516" target="_blank" rel="noopener">[4]putty客户端密钥登录</a><br><a href="https://www.cnblogs.com/starksoft/p/9292794.html" target="_blank" rel="noopener">[5]nginx配置自动启动</a><br><a href="https://blog.csdn.net/sheqianweilong/article/details/89815567" target="_blank" rel="noopener">[6]Linux下Nginx的卸载、安装以及基本使用</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
